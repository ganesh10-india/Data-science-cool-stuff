# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1__l2UnKvp9UCck3XIl65MhAPLy9ZIFXK

# Lab | Pandas Deep-Dive

### 1. Import Pandas package under the alias pd and Numpy under the alias np
"""

import pandas as pd 
import numpy as np

"""### 2. Define a variable called `path` that contains the path to the csv file you downloaded."""

path = 'C:/Users/Dell/Documents/GitHub/PeixotoBootcampIronhack/Week 4/lab-pandas-deep-dive/your-code/apple_store.csv'

"""### 3. Using the Pandas `read_csv()` method, import the csv file at the path above. 

Assign the returned value to a variable called `data`.

Note: you can omit the `sep` parameter for `read_csv()` because the csv file uses the default separator of ",".
"""

data = pd.read_csv(path)

"""### 4. Print the first 5 rows of `data` to see what the data look like.

A data analyst usually does this to have a general understanding about what the data look like before digging deep.
"""

data.head()

"""### 5. Print the summary (info) of the data."""

data.info()

"""### 6. Print the number of columns in the data."""

len(list(data.columns))

"""### 7. Print all column names."""

data.columns

"""## Now that we have a general understanding of the data, we'll start working on the challenge questions.

### 8. How many apps are there in the data source? 

Print the # of observations of the data.

*Hint: Your code should return the number 7197.*
"""

data['track_name'].count()

"""### 9. What is the average rating of all apps? 

First, read the `user_rating` column into a varialbe named `user_rating`.
"""

user_rating = data['user_rating']

"""Now you can calculate the average of the `user_rating` data.

Your code should return 3.526955675976101
"""

user_rating.mean()

"""### 10. How many apps have an average rating no less than 4?

First, filter `user_rating` where its value >= 4. 

Assign the filtered dataframe to a new variable called `user_rating_high`.
"""

user_rating_high = user_rating[user_rating >=4]
user_rating_high.head()

"""Now obtain the length of `user_rating_high` which should return 4781."""

len(user_rating_high)

"""### 11. How many genres are there in total for all the apps?

Define a new variable named `genres` that contains the `prime_genre` column of `data`. Google for how to obtain unique values of a dataframe column.
"""

genres = data['prime_genre'].unique()

"""Print the length of the unique values of `genres`. Your code should return 23."""

len(genres)

"""### 12. What are the top 3 genres that have the most number of apps?

What you want to do is to count the number of occurrences of each unique genre values. Because you already know how to obtain the unique genre values, you can of course count the # of apps of each genre one by one. However, Pandas has a convient function to let you count all values of a dataframe column with a single command. Google for "pandas count values" to find the solution. Your code should return the following:

```
Games            3862
Entertainment     535
Education         453
Name: prime_genre, dtype: int64
```
"""

data['prime_genre'].value_counts().head(3)

"""### 13. Which genre is most likely to contain free apps?

First, filter `data` where the price is 0.00. Assign the filtered data to a new variable called `free_apps`. Then count the values in `free_apps`. Your code should return:

```
Games                2257
Entertainment         334
Photo & Video         167
Social Networking     143
Education             132
Shopping              121
Utilities             109
Lifestyle              94
Finance                84
Sports                 79
Health & Fitness       76
Music                  67
Book                   66
Productivity           62
News                   58
Travel                 56
Food & Drink           43
Weather                31
Navigation             20
Reference              20
Business               20
Catalogs                9
Medical                 8
Name: prime_genre, dtype: int64
```
"""

free_apps = data[data['price'] == 0]
free_apps.head()

"""### 14. Now you can calculate the proportion of the free apps in each genre based on the value counts you obtained in the previous two steps. 

Challenge yourself by achieving that with one line of code. The output should look like:

```
Shopping             0.991803
Catalogs             0.900000
Social Networking    0.856287
Finance              0.807692
News                 0.773333
Sports               0.692982
Travel               0.691358
Food & Drink         0.682540
Lifestyle            0.652778
Entertainment        0.624299
Book                 0.589286
Games                0.584412
Music                0.485507
Photo & Video        0.478510
Utilities            0.439516
Navigation           0.434783
Weather              0.430556
Health & Fitness     0.422222
Business             0.350877
Productivity         0.348315
Medical              0.347826
Reference            0.312500
Education            0.291391
Name: prime_genre, dtype: float64
```

The numbers are interesting, aren't they?
"""

avg_price = data.groupby('prime_genre')['price'].mean()

"""### 15. If a developer tries to make money by developing and selling Apple Store apps, in which genre should s/he develop the apps? Please assume all apps cost the same amount of time and expense to develop.

We will leave this question to you. There are several way to solve it. Ideally your output should look like below:

```
    average_price              genre
21       8.776087            Medical
11       5.116316           Business
4        4.836875          Reference
6        4.835435              Music
1        4.330562       Productivity
15       4.124783         Navigation
16       4.028234          Education
12       1.916444   Health & Fitness
20       1.790536               Book
7        1.647621          Utilities
2        1.605417            Weather
18       1.552381       Food & Drink
14       1.473295      Photo & Video
0        1.432923              Games
8        1.120370             Travel
10       0.953070             Sports
13       0.889701      Entertainment
17       0.885417          Lifestyle
22       0.799000           Catalogs
19       0.517733               News
5        0.421154            Finance
9        0.339880  Social Networking
3        0.016311           Shopping
```
"""

avg_price.sort_values(ascending=False)