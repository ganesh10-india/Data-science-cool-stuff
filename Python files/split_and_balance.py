# -*- coding: utf-8 -*-
"""Split and balance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IDR_LZ_8M8ix7t3unF0EpErbRjtArox1

# Cleaning the data
"""

from sklearn.preprocessing import MinMaxScaler, Imputer

# Drop the target from the training data
X_train, X_test, y_train, y_test = train_test_split(train.drop('TARGET',axis=1), 
                                                    train['TARGET'], test_size=0.20, 
                                                    )
    
# Feature names
features = list(X_train.columns)

# Copy of the testing data
test = X_test.copy()

# Median imputation of missing values
imputer = Imputer(strategy = 'median')

# Scale each feature to 0-1
scaler = MinMaxScaler(feature_range = (0, 1))

# Fit on the training data
imputer.fit(X_train)

# Transform both training and testing data
X_train = imputer.transform(X_train)
X_test = imputer.transform(X_test)

# Repeat with the scaler
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

print('Training data shape: ', X_train.shape)
print('Testing data shape: ', X_test.shape)

"""# Undersample:

### Creating undersample
"""

# Apply the random under-sampling
rus = RandomUnderSampler(return_indices=True)
X_rus, y_rus, idx_resampled = rus.fit_sample(X_train, y_train)
X_res_vis = pca.transform(X_rus)

"""# OVERSAMPLE:

### Creating oversample
"""

ros = RandomOverSampler()
X_rus, y_rus = ros.fit_sample(X_train, y_train)